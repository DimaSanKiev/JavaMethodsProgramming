В сетевом аукционе делаются ставки на товар. Как только клиент изменил значение своей ставки, генерируется
событие и обработчик проверяет ставку на возможность лидерства. Если ставка становится лидером, то сам объект-
генератор ставки будет уведомлен об этом посредством изменения значения поля leader. То есть обработчик событий
влияет на самого генератора. Если ставка не зарегистрирована на покупку данного товара, то никаких действий
предприниматься не будет в ответ на изменение значения цены.

Класс Bid (субъект) располагает информацией о своих наблюдателях и предоставляет интерфейс для регистрации
и уведомления наблюдателей. Интерфейс Observer (наблюдатель) определяет интерфейс обновления для объектов,
которые должны быть уведомлены об изменении субъекта.
Класс AuctionObserver (конкретный наблюдатель) хранит и/или получает объект-событие, содержащий экземпляр Bid,
сохраняет данные и реализует интерфейс обновления, определенный в классе AuctionObserver для поддержки
согласованности с субъектом.

Шаблон обеспечивает автоматическое уведомление всех подписавшихся на него объектов. Кроме этого применение
шаблона Observer абстрагирует связь субъекта и наблюдателя. Субъект имеет информацию только о том, что у него
есть один или некоторое число наблюдателей, каждый из которых подчиняется интерфейсу абстрактного класса-наблюдателя.

***

Классы AuctionObserver реализует интерфейс Observer и является наблюдателем. Как только субъект Bid изменяется,
генерируется объект BidEvent, он передается методу handleEvent(), который выполнит действия в соответствии с
реализованным интерфейсом и изменит, если необходимо, состояние объекта LeaderInfo и объектов, зарегистрированных
у наблюдателя.

Если две и более ставок окажутся максимальными, то все они будут помечены как лидеры. Данная задача станет более
демонстративной, если ее реализовать с применением конкурирующих операций.