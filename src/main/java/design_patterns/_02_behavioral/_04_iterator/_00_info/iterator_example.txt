Ниже приведена реализация итератора для класса StudentSession, инкапсулирующего в виде карты HashMap
результаты студенческой сеесии. Шаблон Iterator представлен в классическом виде, но с использованием методов
итератора, предоставленного стандартными библиотеками языка Java.

Однако такая реализация шаблона Iterator не позволит использовать для обхода объекта StudentSession цикл for(:).
Для придания идентичности пользователькой реализации шаблона итерируемый класс должен реализовать интерфейс
java.lang.Iterable и предоставить реализацию метода iterator() в виде:

public class StudentSession implements Iterable<String> {
    // some code here
    // реализация итератора

    @Override
    public Iterator<Item> iterator() {
        return listItems.iterator();
    }
}

Класс ConcreteIterator может быть не только внешним, но и внутренним.
Внешний итератор позволяет обходить элементы объекта внешним пользователям, в то время как внутренний итератор
обходит элементы по требованию извне. Реализован он также может быть и как внешний класс, и как внутренний.
Итератор может работать со статической копией объекта, предоставленной ему при создании, а может работать
с коллекцией в реальном состоянии.
Последний вариант предрасположен к динамическим ошибкам, поэтому к его реализации нужно подходить аккуратно.

Итераторы могут использовать сложные способы обхода, например, при обходе дерева, составленного по шаблону Composite.