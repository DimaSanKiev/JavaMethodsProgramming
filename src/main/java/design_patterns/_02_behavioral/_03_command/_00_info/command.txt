При работе с приложением пользователь выполняет различные операции, в ответ система всегда должна знать,
где находятся данные для ее выполнения и какие действия следует выполнить. Все данные, необходимые
для выполнения операции можно объединить в один объект, который и будет определять действие, или,
по иному, команду.

При передаче в бизнес-логику системы запроса на действие в произвольном виде, запрос таким образом
преобразуется в объект-команду, метод которого может быть вызван, а сам объект может быть сохранен
и/или передан в качестве параметра метода или возвращен как любой другой объект. Инкапсулирует запрос как объект.

Объект-источник запроса отделяется от команды, но от его типа зависит, какая из команд будет выполнена.

Основной интерфейс объекта-команды определяется в абстрактном классе AbstractCommand или в интерфейсе ICommand
и в общем случае представлен одним методом execute(). Подклассы определяют конкретного исполнителя запроса,
методы execute() которых обращаются к требуемой операции бизнес-логики.

Кроме команд участником шаблона может быть Invoker, класс вызова исполняющего метода команды.
Класс Receiver, экземпляру которого и предназначен объект-команда. Методы класса Receiver выполняет переданный
с командой запрос. Для определения типа команды и инициализации подходящего объекта испоьзуется класс Client.

Шаблон Command используется при:
— разделении источника запроса и его исполнителя;
— необходимости построения последовательности команд, порядок в которй определяет сам пользователь
в зависимости от своего желания или результатов выполнения предыдущей команды;
— необходимости отмены предыдущей команды;
— выполнении операций с транзакциями.