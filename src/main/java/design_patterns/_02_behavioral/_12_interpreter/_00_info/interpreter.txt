Существует много подходов к решению сложной задачи, состоящей из некоторого количества подзадач.
Подзадачи в такой ситуации каким-то образом связаны между собой. Для описания межзадачных связей создается
некоторое подобие простого языка, с помощью которого можно переопределить исходную задачу целиком.

Деление на части преследует цель упрощения решения как подзадачи, так и, в конечном итоге, возможность на основе
решения всех подзадач составитьрешение основной проблемы.

Шаблон Interpreter задает описания подзадач с помощью некоторого простого языка после выполнения декомпозиции
сложной задачи на ряд небольших. Полученные в итоге выражения обрабатываются и решаются другой частью шаблона
с построением некоторого синтаксического дерева.

Интерфейс AbstractExpression задает основные правила взаимодействия с клиентом. Его реализации типа
TerminalExpression представляют листья синтаксической обработки выражений. Класс NoTerminalExpression отличается
от терминальных классов тем, что содержит ссылку на следующий объект типа TerminalExpression и вызывает, если
необходимо, методы interpret() для других подклассов. В класс Context помещается информация, передаваемая при
необходимости интерпретатору для выполнения действий. Роль объекта типа Client заключается в инициализации и
предоставлении объектов типа AbstractExpression, для составления конкретного выражения.