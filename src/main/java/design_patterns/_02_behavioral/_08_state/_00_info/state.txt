Позволяет отслеживать состояния объекта класса на основе агрегированных им объектов, классы которых в свою очередь
могут быть организованы в некоторую иерархию классов-состояний или по другому принципу.

Шаблон State очень часто используется без всякого упоминания разработчика о нем. Отслеживание состояния объекта
некоторого класса и его изменений в процессе работы приложения могут иметь значение для корректного функционирования.
Поведение такого объекта часто и определяется его внутренним состоянием. Объект Счет Клиента может быть в состояниях
«доступен»-«блокирован», объект Заказ может быть в состояниях «в обработке»-«выполнен». Отслеживание и изменение
таких биполярных состояний легко реализуется введением в класс поля типа boolean и соответствующих методов по его
изменению и извлечению. Если же состояний несколько и процесс перехода из одного состояния в другое подчиняется
набору правил, то для организации переходов между состояниями используется иерархия состояний и специальный
класс-контекст, управляющий изменениями состояний. В общем случае объект может находиться в одном состоянии из их
конечного набора. Нарушение этого правила при проектировании организации состояний делает восприятие класса
практически невозможным.

Реализация интерфейса State отвечает за одно конкретное состояние. Метод someAction() изменяет состояние. Класс
Context представляет описание сущности, изменение состояния которой интересует наблюдателя. Этот класс должен,
как правило, обладать методами по изменению поля state. Но за упрвление состояниями может отвечать и другой класс.