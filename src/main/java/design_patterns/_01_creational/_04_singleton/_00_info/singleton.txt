Необходимо создать объект класса таким образом, чтобы гарантировать невозможность инициализации другого объекта
того же класса. Обычно сам класс контролирует наличие единственного экземпляра и он же предоставляет
при необходимости к нему доступ. Решение должно подходить для многопоточных приложений при условии отсутствия
опасности возникновения исключительных ситуаций в конструкторе.

В настоящее время существует реализация шаблона, инициализация экземпляра которого не требует защиты при
использовании в многопоточном режиме:

public enum SingletonEnum {
INSTANCE;
    // fields, methods
}

Любая реализация класса Enum гарантирует наличие только одного экземпляра каждого своего элемента.
При реализации шаблона Singleton у перечисления описывается только один элемент.
Возможность возникновения исключения в конструкторе при создании единственного экземпляра налагает определенную
ответственность на процесс инициализации экземпляра. Повторный процесс инициализации должен быть осуществим
в реализации класса-одиночки.

*****

SemaphoreImpl.java

В случае, если шаблон Singleton подразумевает ограничение на количество ссылок больше одной,
то удобно использовать инициализацию через Semaphore.

При первом вызове getInstance() с любым значением список еще пуст, в первом блоке if условие ложное.
Второй блок if уменьшает значение семафора с 10 до 9 и создает 0, добавляет в список экземпляр SemaphoreImpl.
В списке теперь присутствует один экземпляр, и он доступен при вызове getInstance() с параметром, равным 0.
При следующих вызовах, например, с инкрементным увеличением индекса семафор уменьшает свое значение,
а список пополняется недостающими экземплярами. При попытке получить доступ к объекту с индексом
вне допустимых значений списка при обнуленном значении семафора будет генерироваться исключение.
Приведенное решение — самое медленное, однако его приемущество в настраиваемом количестве ссылок.

