Шаблон позволяет упростить доступ к сложной системе, объединив несколько действий различных классов
под одним интерфейсом и делегировав ему обязанности отправлять сообщения этим классам. Клиент системы
знает только об интерфейсе фасада и ничего не знает о структуре классов и последовательности вызовов,
приводящих его к желаемому результату. В роли интерфейса в общем случае будет выступать совокупность
классов, а не один класс со множеством обязанностей. Примером Façade может служить библиотека
mysql-connector-[версия].jar для организации соединения и выполнения запросов к базе данных MySQL.

При разработке приложения часто приходится использовать классы/пакеты/библиотеки, созданные другими
разработчиками. Причем не суть важно, являются ли эти программисты членами вашей команды или это библиотека
от фирмы-производителя. При использовании таких библиотек для получения результата обычно необходимо
выполнить вызов нескольких методов по определенному правилу. Причем обращение к этому функционалу может
производиться довольно часто из разных частей кода программиста. В такой ситуации имеет смысл выделить
этот интерфейс в отдельный код, организованный в классы и пакеты отдельного класса и пользоваться им
при необходимости, не усложняя собственный код.

Как частный случай решения в качестве Façade может выступать единственный класс с единственным методом.
Такое примитивное решение уже конкурирует с аналогичными шаблонами. Существует опасность получить сильно
связанный класс с громоздким «волшебным» методом.

***

Скрывать классы, используемые фасадом, не обязательно. Клиент может даже предоставлять данные для их
инициализации.

***

Снижается число связей клиентского класса с системой. Каждый метод фасада решает свою конкретную задачу,
упрощая клиенту обращение к системе.
При реализации фасада не следует допускать прямое обращение класса-клиента к классу системы, минуя фасад.