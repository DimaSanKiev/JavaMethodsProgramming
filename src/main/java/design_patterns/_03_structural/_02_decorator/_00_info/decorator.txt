Расширяет функциональные возможности объекта, изменяя его поведение. Расширяющий класс реализует тот же
самый интерфейс, что и исходный класс, делегируя исходному классу выполнение базовых операций. Может добавлять
собственные операции. Представляет собой альтернативу множественному наследованию, то есть может добавлять
функциональность классу, от которого нельзя наследоваться. Добавляемая функциональность может быть легко
исключена при переработке кода. Шаблон Decorator позволяет динамически изменять поведение экземпляров
в процессе выполнения приложения.

Элементы шаблона:

1) Component — определяет базовый интерфейс декорируемого типа;

2) ConcreteComponent — декорируемый тип с реализацией базовых операций. Таких классов может быть несколько;

3) Decorator — агрегирует декорируемый тип Component и наследует его реализацию. Определяет интерфейс для
подклассов декораторов;

4) ConcreteDecorator — конкретный декоратор, содержащий конкретную реализацию интерфейса, определяемого типом
Decorator, может объявлять дополнительное поведение. Может использовать как агрегированный тип, так и
переопределять унаследованный интерфейс.

Позволяет уменьшить число подклассов по сравнению с аналогичным решением без использования декоратора.
Однако при большом количестве классов-декораторов решение резко утяжеляется, становится малопонятным и
утрачивает все преимущества от коротких применений шаблона.